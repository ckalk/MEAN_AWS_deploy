{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/inventory.service.ts","webpack:///./src/app/item.ts","webpack:///./src/app/products/create/create.component.css","webpack:///./src/app/products/create/create.component.html","webpack:///./src/app/products/create/create.component.ts","webpack:///./src/app/products/list/list.component.css","webpack:///./src/app/products/list/list.component.html","webpack:///./src/app/products/list/list.component.ts","webpack:///./src/app/products/products.component.css","webpack:///./src/app/products/products.component.html","webpack:///./src/app/products/products.component.ts","webpack:///./src/app/products/show/show.component.css","webpack:///./src/app/products/show/show.component.html","webpack:///./src/app/products/show/show.component.ts","webpack:///./src/app/products/update/update.component.css","webpack:///./src/app/products/update/update.component.html","webpack:///./src/app/products/update/update.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProductsComponent } from './products/products.component';\nimport { ListComponent } from './products/list/list.component';\nimport { CreateComponent } from './products/create/create.component';\nimport { ShowComponent } from './products/show/show.component';\nimport { UpdateComponent } from './products/update/update.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'products', pathMatch: 'full'},\n  { path: 'products', component: ProductsComponent,   children: [\n    { path: '', redirectTo: 'list' , pathMatch: 'full' },\n    { path: 'list', component: ListComponent },\n    { path: 'new', component: CreateComponent },\n    { path: ':id', component: ShowComponent},\n    { path: ':id/edit', component: UpdateComponent}\n    ]}\n  ];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n\\n  <div class=\\\"jumbotron banner\\\">\\n      <h1 class=\\\"display-5\\\">{{ title }}</h1>\\n  </div>\\n\\n  <!-- main navigation bar here if you need one -->\\n\\n\\n   <!-- content body here -->\\n\\n   <router-outlet></router-outlet>\\n\\n  <hr class='mt-5'>\\n\\n  <footer>\\n      <p>&copy; Kalkulations 2018</p>\\n  </footer>\\n\\n</div>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Commerce Manager';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { InventoryService } from './inventory.service';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ProductsComponent } from './products/products.component';\nimport { ListComponent } from './products/list/list.component';\nimport { ShowComponent } from './products/show/show.component';\nimport { CreateComponent } from './products/create/create.component';\nimport { UpdateComponent } from './products/update/update.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProductsComponent,\n    ListComponent,\n    ShowComponent,\n    CreateComponent,\n    UpdateComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  providers: [\n    InventoryService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n// import Angular blueprint for a product item -- Product\nimport { Item } from './item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n\n  item: Item;\n  allItems = new BehaviorSubject([]);\n\n// this must agree with what is included in server.js for routes -- // products here is the server-side page routing for all pages\n// beginning with /products\n  private base = '/api/products';\n\n  constructor( private _http: HttpClient ) { }\n\n  getProducts() {\n    console.log('SERVICE in InventoryService getProducts');\n    return this._http.get(this.base);\n  }\n\n  createProduct(item: Item): Observable<Item> {\n    console.log('SERVICE in InventoryService createProduct to add item: ', item);\n    return this._http.post<Item>(this.base, item);\n  }\n\n  updateProduct(_id: string, item: Item) {\n    console.log('SERVICE in InventoryService updateProduct to change item _id: ', _id, 'to be item:', item);\n\n    console.log('SERVICE in InventoryService updateProduct is calling .put route $(this.base)/$(_id): ', `${this.base}/${_id}` );\n    return this._http.put( `${this.base}/${_id}`,  item);\n  }\n\n  deleteProduct(_id: string): Observable<Item> {\n    console.log('SERVICE in InventoryService deleteProduct to delete _id:', _id);\n    console.log('SERVICE in InventoryService deleteProduct is calling .delete route $(this.base)/$(_id): ', `${this.base}/${_id}` );\n\n    return this._http.delete<Item>( `${this.base}/${_id}` );\n  }\n\n  getProduct(_id: string): Observable<Item> {\n    console.log('SERVICE in InventoryService getProduct (single) to get _id:', _id);\n    console.log('SERVICE in InventoryService getProduct is calling .get route $(this.base)/$(_id): ', `${this.base}/${_id}` );\n    return this._http.get<Item>( `${this.base}/${_id}` );\n  }\n\n}\n","\n// Angular blueprint for product items.\n\nexport class Item {\n    name: string;\n    price: number;\n    qty: number;\n\n    constructor() {\n    }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"card-header\\\">\\n\\n      <h3>New Product</h3>\\n\\n</div>\\n\\n<div class=\\\"card-body\\\">\\n\\n  <!-- if errors returned, display them -->\\n  <div *ngIf='formErrors'>\\n    <ul class=\\\"alert alert-danger\\\">\\n      <li *ngFor = \\\"let e of formErrors\\\">\\n        {{ e }}\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <!-- <form (submit)='onSubmit($event, formData.value)' #formData='ngForm'> -->\\n\\n  <form  #formData='ngForm'>\\n\\n      <div class = 'form-group row' >\\n\\n        <label for = 'name'  class = 'col-sm-2 col-form-label text-right'>\\n          Name\\n        </label>\\n\\n        <div class = 'col-sm-4'>\\n          <input\\n            name ='name'\\n            placeholder = \\\"Enter product name\\\"\\n            type = 'text'\\n            class ='form-control'\\n            required\\n            minlength = '3'\\n            #name = 'ngModel'\\n            [(ngModel)]='item.name'\\n          />\\n        </div>\\n\\n        <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\"\\n        class=\\\"alert alert-danger\\\">\\n\\n          <div *ngIf=\\\"name.errors.required\\\">\\n              Name is required.\\n          </div>\\n\\n          <div *ngIf=\\\"name.errors.minlength\\\">\\n              Name must be at least {{ name.errors.minlength.requiredLength }} characters long.\\n          </div>\\n\\n        </div>\\n\\n      </div>\\n\\n\\n      <div class = 'form-group row' >\\n\\n          <label for = 'qty'  class = 'col-sm-2 col-form-label text-right'>\\n            Qty\\n          </label>\\n\\n          <div class = 'col-sm-4'>\\n            <input\\n              name ='qty'\\n              placeholder = \\\"Enter product quantity\\\"\\n              type = 'number'\\n              pattern=\\\"^[0-9]*$\\\"\\n              class ='form-control'\\n              required\\n              #qty = 'ngModel'\\n              [(ngModel)]='item.qty'\\n            />\\n          </div>\\n\\n          <div class = 'col-sm-6' *ngIf=\\\"qty.invalid && (qty.dirty || qty.touched)\\\"\\n                class=\\\"alert alert-danger\\\">\\n\\n            <div *ngIf=\\\"qty.errors.required\\\">\\n              Quantity is required.\\n            </div>\\n\\n            <div *ngIf=\\\"qty.errors.pattern\\\">\\n                Qty must be an integer greater than 0.\\n            </div>\\n\\n          </div>\\n\\n      </div>\\n\\n\\n      <div class = 'form-group row' >\\n\\n          <label for = 'price'  class = 'col-sm-2 col-form-label text-right'>\\n            Price\\n          </label>\\n\\n          <div class = 'col-sm-4'>\\n            <input\\n              name ='price'\\n              placeholder = \\\"Enter product price\\\"\\n              type = 'number'\\n              pattern=\\\"^\\\\s*(?=.*[0-9])\\\\d*(?:\\\\.\\\\d{1,2})?\\\\s*$\\\"\\n              class ='form-control'\\n              required\\n              #price = 'ngModel'\\n              [(ngModel)]='item.price'\\n            />\\n          </div>\\n\\n          <div class = 'col-sm-6' *ngIf=\\\"price.invalid && (price.dirty || price.touched)\\\"\\n                class=\\\"alert alert-danger\\\">\\n\\n            <div *ngIf=\\\"price.errors.required\\\">\\n              Price is required.\\n            </div>\\n\\n            <div *ngIf=\\\"price.errors.pattern\\\">\\n                Price must be greater than 0.\\n            </div>\\n\\n          </div>\\n\\n      </div>\\n\\n    </form>\\n\\n    <div class = 'row col-sm-6 justify-content-end'>\\n      <button (click) = 'resetForm($event, formData)' class = 'btn btn-warning mr-5'>\\n          Reset\\n      </button>\\n      <button (click) = 'onSubmit($event, formData.value)' class = 'btn btn-success' [disabled] = 'formData.invalid'>\\n          Create\\n      </button>\\n    </div>\\n\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { InventoryService } from '../../inventory.service';\n\nimport { Item } from '../../item';\n\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit {\n\n  item: Item = new Item();\n  formErrors: String[];\n\n  constructor( private _router: Router, private _invService: InventoryService ) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit(event: Event, newitem: Item): void {\n\n    event.preventDefault();\n\n    console.log('CREATE component onSubmit with new item: ', newitem);\n\n    // on submit of form, call _invService.createItem to add new item to db\n    this._invService.createProduct(newitem).subscribe(\n      () => {\n        console.log('CREATE component onSubmit _invService.createProduct in success branch');\n\n        // redirect to products listing route\n        this._router.navigateByUrl('/products/list');\n        },\n        error => {\n          console.log('CREATE component onSubmit _invService.createProduct returned with error:', error.error);\n          this.formErrors = error.error;\n        }\n      );\n    }\n\n  // clear form if user clicks reset button\n  resetForm(event: Event, formData: NgForm): void {\n\n    console.log('CREATE component resetForm');\n    // reset formData\n    formData.reset();\n    this.formErrors = null;\n\n    }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"card-header\\\">\\n  <div class =\\\"justify-content-between row\\\" >\\n    <h3>Product List</h3>\\n    <a  class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/products', 'new']\\\">Add New Product</a>\\n  </div>\\n\\n</div>\\n\\n\\n<div class=\\\"card-body\\\">\\n\\n  <table class=\\\"mt-2 table table-striped table-bordered\\\">\\n\\n      <thead class=\\\"thead-dark\\\">\\n        <tr>\\n          <th scope=\\\"col\\\">ID</th>\\n          <th scope=\\\"col\\\">Name</th>\\n          <th scope=\\\"col\\\">Qty</th>\\n          <th scope=\\\"col\\\">Price</th>\\n          <th scope=\\\"col\\\">Actions</th>\\n        </tr>\\n      </thead>\\n\\n      <tbody>\\n        <tr *ngFor='let i of allItems'>\\n          <td>{{ i._id}}</td>\\n          <td>{{ i.name }}</td>\\n          <td>{{ i.qty }}</td>\\n          <td>{{ i.price | currency }}</td>\\n          <td>\\n\\n            <div class='row justify-content-center'>\\n\\n              <button (click) = 'editItem(i._id)' class = 'btn btn-primary mr-5'>\\n                Edit\\n              </button>\\n\\n              <button [routerLink]=\\\"['/products', i._id]\\\"\\n              class = 'btn btn-success'>\\n                Details\\n              </button>\\n\\n            </div>\\n          </td>\\n        </tr>\\n      </tbody>\\n\\n    </table>\\n\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Item } from '../../item';\nimport { InventoryService } from '../../inventory.service';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n  item: Item = new Item();\n  allItems: Item[] = [];\n\n  constructor( private _invservice: InventoryService, private _router: Router ) {\n  }\n\n  ngOnInit() {\n    this.getAll();\n  }\n\n  getAll() {\n    this._invservice.getProducts()\n    .subscribe(\n      (response: any) => {\n        this.allItems = response;\n        console.log('list.component.ts call _invservice.getProducts() allItems', this.allItems);\n     },\n      (err) => {\n        console.log('list.component.ts call _invservice.getProducts() error:', err);\n     }\n   );\n  }\n\n  editItem(id) {\n\n    console.log('LIST component editItem with product._id: ', id);\n\n    // redirect to product edit route\n    console.log('LIST COMPONENT calling Angular route:', `/products/${id}/edit`);\n    this._router.navigateByUrl(`/products/${id}/edit`);\n\n    }\n\n  // showItem(id) {\n\n  //   console.log('LIST component showItem with product._id: ', id);\n\n  //   // redirect to product show (Angular) route\n  //   console.log('LIST COMPONENT calling Angular route:', `/products/${id}`);\n\n  //   this._router.navigateByUrl('/products/{$id)');\n\n  // }\n\n}\n","module.exports = \"\"","module.exports = \"\\n<div class=\\\"card mt-5\\\">\\n\\n\\n  <!--  card content = products content here, depending on angular routing-->\\n\\n  <router-outlet></router-outlet>\\n\\n\\n</div>\\n<!-- end of card-->\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n<div class=\\\"card-header\\\">\\n\\n    <h3>Product Details</h3>\\n\\n</div>\\n\\n\\n<div class=\\\"card-body\\\">\\n\\n\\n    <p class = 'small'>To delete a product, the Qty must be 0.</p>\\n\\n    <div class=\\\"row mt-3\\\">\\n        <div class=\\\"col-3 font-weight-bold\\\">\\n          Name:\\n        </div>\\n        <div class=\\\"col\\\">\\n          {{ item?.name }}\\n        </div>\\n    </div>\\n\\n    <div class=\\\"row mt-3\\\">\\n      <div class=\\\"col-3 font-weight-bold\\\">\\n          Qty:\\n      </div>\\n      <div class=\\\"col\\\">\\n          {{ item?.qty }}\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row mt-3\\\">\\n      <div class=\\\"col-3 font-weight-bold\\\">\\n          Price:\\n      </div>\\n      <div class=\\\"col\\\">\\n          {{ item?.price | currency}}\\n      </div>\\n    </div>\\n\\n    <div class = 'row offset-3 mt-3'>\\n      <button [routerLink]=\\\"['/products']\\\" class = 'btn btn-primary mr-5'>\\n        Back\\n      </button>\\n      <button (click) = 'deleteItem(item._id)' class = 'btn btn-danger' [disabled] = \\\"noDelete\\\">\\n        Delete\\n      </button>\\n    </div>\\n\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { switchMap } from 'rxjs/operators';\n\nimport { Item } from '../../item';\nimport { InventoryService } from '../../inventory.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-show',\n  templateUrl: './show.component.html',\n  styleUrls: ['./show.component.css']\n})\nexport class ShowComponent implements OnInit {\n  @Input() item: Item;\n  noDelete: boolean;\n  errorMessage: string;\n\n\n  constructor(\n    private readonly _router: Router,\n    private readonly _route: ActivatedRoute,\n    private readonly _invservice: InventoryService\n  ) {}\n\n  ngOnInit() {\n    this._route.paramMap\n      .pipe(\n        switchMap(params => this._invservice.getProduct(params.get('id')))\n      )\n      .subscribe(\n        item => {\n          this.item = item;\n          this.noDelete = true;\n          if (this.item.qty <= 0) {\n            this.noDelete = false;\n          }\n          console.log('SHOW component OnInit this.item:', this.item, ' this.noDelete:', this.noDelete);\n        },\n        (error: HttpErrorResponse) => {\n          console.log('SHOW component OnInit error retrieving item', error);\n          this.errorMessage = error.statusText;\n          this._router.navigateByUrl('products');\n        }\n      );\n  }\n\n\n  deleteItem(id) {\n\n    console.log('SHOW component deleteItem with product._id: ', id);\n\n    // on click of delete button  call _invservice to delete product with product.id from db\n    this._invservice.deleteProduct(id).subscribe();\n    this._router.navigateByUrl('products');\n\n  }\n\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"card-header\\\">\\n\\n    <h3>Update Product</h3>\\n\\n</div>\\n\\n<!-- if errors returned, display them -->\\n<div *ngIf='formErrors'>\\n  <ul class=\\\"alert alert-danger\\\">\\n    <li *ngFor = \\\"let e of formErrors\\\">\\n      {{ e }}\\n    </li>\\n  </ul>\\n</div>\\n\\n\\n<div class=\\\"card-body\\\">\\n\\n<form #formData='ngForm'>\\n\\n    <div class = 'form-group row' >\\n\\n      <label for = 'name'  class = 'col-sm-2 col-form-label text-right'>\\n        Name\\n      </label>\\n\\n      <div class = 'col-sm-4'>\\n        <input\\n          name ='name'\\n          placeholder = \\\"Enter product name\\\"\\n          type = 'text'\\n          class ='form-control'\\n          required\\n          minlength = '3'\\n          #name = 'ngModel'\\n          [(ngModel)]='item.name'\\n          value ='item.name'\\n        />\\n      </div>\\n\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\"\\n      class=\\\"alert alert-danger\\\">\\n\\n        <div *ngIf=\\\"name.errors.required\\\">\\n            Name is required.\\n        </div>\\n\\n        <div *ngIf=\\\"name.errors.minlength\\\">\\n            Name must be at least {{ name.errors.minlength.requiredLength }} characters long.\\n        </div>\\n\\n      </div>\\n\\n    </div>\\n\\n\\n    <div class = 'form-group row' >\\n\\n        <label for = 'qty'  class = 'col-sm-2 col-form-label text-right'>\\n          Qty\\n        </label>\\n\\n        <div class = 'col-sm-4'>\\n          <input\\n            name ='qty'\\n            placeholder = \\\"Enter product quantity\\\"\\n            type = 'number'\\n            pattern=\\\"^[0-9]*$\\\"\\n            class ='form-control'\\n            required\\n            #qty = 'ngModel'\\n            [(ngModel)]='item.qty'\\n            value ='item.qty'\\n          />\\n        </div>\\n\\n        <div class = 'col-sm-6' *ngIf=\\\"qty.invalid && (qty.dirty || qty.touched)\\\"\\n              class=\\\"alert alert-danger\\\">\\n\\n          <div *ngIf=\\\"qty.errors.required\\\">\\n            Quantity is required.\\n          </div>\\n\\n          <div *ngIf=\\\"qty.errors.pattern\\\">\\n              Qty must be an integer greater than 0.\\n          </div>\\n\\n        </div>\\n\\n    </div>\\n\\n\\n    <div class = 'form-group row' >\\n\\n        <label for = 'price'  class = 'col-sm-2 col-form-label text-right'>\\n          Price\\n        </label>\\n\\n        <div class = 'col-sm-4'>\\n          <input\\n            name ='price'\\n            placeholder = \\\"Enter product price\\\"\\n            type = 'number'\\n            pattern=\\\"^\\\\s*(?=.*[0-9])\\\\d*(?:\\\\.\\\\d{1,2})?\\\\s*$\\\"\\n            class ='form-control'\\n            required\\n            #price = 'ngModel'\\n            [(ngModel)]='item.price'\\n            value ='item.price'\\n          />\\n        </div>\\n\\n        <div class = 'col-sm-6' *ngIf=\\\"price.invalid && (price.dirty || price.touched)\\\"\\n              class=\\\"alert alert-danger\\\">\\n\\n          <div *ngIf=\\\"price.errors.required\\\">\\n            Price is required.\\n          </div>\\n\\n          <div *ngIf=\\\"price.errors.pattern\\\">\\n              Price must be greater than 0.\\n          </div>\\n\\n        </div>\\n\\n    </div>\\n\\n  </form>\\n\\n    <div class = 'row col-sm-6 justify-content-end'>\\n      <button (click) = 'initialValues($event, formData)' class = 'btn btn-warning mr-5'>\\n        Reset\\n      </button>\\n      <button (click) = 'onUpdate($event, formData.value)' class = 'btn btn-success' [disabled] = 'formData.invalid'>\\n          Update\\n      </button>\\n    </div>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Item } from '../../item';\nimport { InventoryService } from '../../inventory.service';\n\n@Component({\n  selector: 'app-update',\n  templateUrl: './update.component.html',\n  styleUrls: ['./update.component.css']\n})\nexport class UpdateComponent implements OnInit {\n\n  item: Item;\n  tmpItem: Item;\n  _id_of_item: string;\n  formErrors: String[];\n\n  constructor(\n    private _invservice: InventoryService,\n    private _route: ActivatedRoute,\n    private _router: Router ) {\n    }\n\n  ngOnInit() {\n    // call on InventoryService getProduct(_id: string) to return Observable of type Item with that id to be edited\n    this._route.paramMap.subscribe( params => {\n        this._id_of_item = params.get('id');\n        console.log('this._id_of_item:', this._id_of_item);\n\n        this._invservice.getProduct(this._id_of_item)\n        .subscribe(\n          itemReturned => {\n          this.item = itemReturned;\n          this.tmpItem = Object.assign({}, itemReturned);\n          console.log('UPDATE COMPONENT ngOnInit retrieved this.item: ', this.item);\n          },\n          error => {\n            console.log(error);\n          }\n        );\n    });\n  }\n\n  onUpdate(event: Event, changeditem: Item): void {\n\n      event.preventDefault();\n\n      console.log('UPDATE COMPONENT  onUpdate with changed product with _id: ', this._id_of_item, 'with changed product:', changeditem);\n\n      // on submit, call _invservice.updateProduct to update product in db\n      this._invservice.updateProduct(this._id_of_item, changeditem).subscribe(\n        () => {\n          console.log('UPDATE component onUpdate _invservice.updateProduct in success branch');\n\n          // redirect to products listing route\n          this._router.navigateByUrl('/products');\n          },\n          error => {\n            console.log('UPDATE component onUpdate _invservice.updateProduct returned with error:', error.error);\n            this.formErrors = error.error;\n          }\n        );\n      }\n\n\n    // return to initial values if user clicks reset button\n    initialValues(event: Event, formData: NgForm): void {\n\n      console.log('UPDATE component resetForm to initial values', this.tmpItem);\n      // reset formData to initial values\n      formData.resetForm(this.tmpItem);\n      this.formErrors = null;\n\n      }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}